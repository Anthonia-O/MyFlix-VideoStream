name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # CI Jobs: Build and Push Docker Images
  frontend:
    name: üíª Frontend - Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies for Frontend
        run: npm install
        working-directory: ./frontend

      - name: Build Docker image for Frontend
        run: docker build -t frontend ./frontend

      - name: Tag Docker image for Frontend
        run: docker tag frontend ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image for Frontend
        run: docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

  api-gateway:
    name: üö™ API Gateway - Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for API Gateway
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies for API Gateway
        run: npm install
        working-directory: ./api-gateway

      - name: Build Docker image for API Gateway
        run: docker build -t api-gateway ./api-gateway

      - name: Tag Docker image for API Gateway
        run: docker tag api-gateway ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image for API Gateway
        run: docker push ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest

  authentication:
    name: üîê Authentication - Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for Authentication
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies for Authentication
        run: npm install
        working-directory: ./backend/authentication

      - name: Build Docker image for Authentication
        run: docker build -t authentication ./backend/authentication

      - name: Tag Docker image for Authentication
        run: docker tag authentication ${{ secrets.DOCKER_USERNAME }}/authentication:latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image for Authentication
        run: docker push ${{ secrets.DOCKER_USERNAME }}/authentication:latest

  billing:
    name: üí∏ Billing - Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for Billing
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies for Billing
        run: npm install
        working-directory: ./backend/billing

      - name: Build Docker image for Billing
        run: docker build -t billing ./backend/billing

      - name: Tag Docker image for Billing
        run: docker tag billing ${{ secrets.DOCKER_USERNAME }}/billing:latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image for Billing
        run: docker push ${{ secrets.DOCKER_USERNAME }}/billing:latest

  video-management:
    name: üé• Video Management - Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for Video Management
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies for Video Management
        run: npm install
        working-directory: ./backend/video-management

      - name: Build Docker image for Video Management
        run: docker build -t video-management ./backend/video-management

      - name: Tag Docker image for Video Management
        run: docker tag video-management ${{ secrets.DOCKER_USERNAME }}/video-management:latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image for Video Management
        run: docker push ${{ secrets.DOCKER_USERNAME }}/video-management:latest

  watchlist:
    name: üìã Watchlist - Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for Watchlist
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies for Watchlist
        run: npm install
        working-directory: ./backend/watchlist

      - name: Build Docker image for Watchlist
        run: docker build -t watchlist ./backend/watchlist

      - name: Tag Docker image for Watchlist
        run: docker tag watchlist ${{ secrets.DOCKER_USERNAME }}/watchlist:latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image for Watchlist
        run: docker push ${{ secrets.DOCKER_USERNAME }}/watchlist:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs:
      - frontend
      - api-gateway
      - authentication
      - billing
      - video-management
      - watchlist
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Log in to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Pull the latest Docker images
            docker-compose pull

            # Stop and remove existing containers
            docker-compose down

            # Start updated containers with .env file
            docker-compose up -d
          EOF
